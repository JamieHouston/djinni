// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#pragma once

#include "AssortedPrimitives.h"
#include "ClientInterfaceProxy.h"
#include "Color.h"
#include "MapListRecord.h"
#include "NestedCollection.h"
#include "PrimitiveList.h"
#include "SetRecord.h"
#include "UserTokenProxy.h"
#include "test_helpers.hpp"
#include <memory>
#include <stdint.h>

namespace testsuite {

public ref class TestHelpers sealed : public Platform::Object
{
public:
    static SetRecord^ GetSetRecord ();
    static bool CheckSetRecord (SetRecord^ Rec);
    static PrimitiveList^ GetPrimitiveList ();
    static bool CheckPrimitiveList (PrimitiveList^ Pl);
    static NestedCollection^ GetNestedCollection ();
    static bool CheckNestedCollection (NestedCollection^ Nc);
    static Windows::Foundation::Collections::IMap<Platform::String^, int64_t>^ GetMap ();
    static bool CheckMap (Windows::Foundation::Collections::IMap<Platform::String^, int64_t>^ M);
    static Windows::Foundation::Collections::IMap<Platform::String^, int64_t>^ GetEmptyMap ();
    static bool CheckEmptyMap (Windows::Foundation::Collections::IMap<Platform::String^, int64_t>^ M);
    static MapListRecord^ GetMapListRecord ();
    static bool CheckMapListRecord (MapListRecord^ M);
    static void CheckClientInterfaceAscii (IClientInterface^ I);
    static void CheckClientInterfaceNonascii (IClientInterface^ I);
    static void CheckClientInterfaceArgs (IClientInterface^ I);
    static void CheckEnumMap (Windows::Foundation::Collections::IMap<Color, Platform::String^>^ M);
    static void CheckEnum (Color C);
    static IUserToken^ TokenId (IUserToken^ T);
    static IUserToken^ CreateCppToken ();
    static void CheckCppToken (IUserToken^ T);
    static int64_t CppTokenId (IUserToken^ T);
    static void CheckTokenType (IUserToken^ T, Platform::String^ Type);
    static Platform::IBox<int>^ ReturnNone ();
    static AssortedPrimitives^ AssortedPrimitivesId (AssortedPrimitives^ I);
    static Platform::Array<uint8_t>^ IdBinary (const Platform::Array<uint8_t>^ B);
internal:
    TestHelpers(std::shared_ptr<::testsuite::TestHelpers> cppRef) : _cppRef(cppRef) {}
    std::shared_ptr<::testsuite::TestHelpers> cppRef() {return _cppRef;}
private:
    std::shared_ptr<::testsuite::TestHelpers> _cppRef;
};

}  // namespace testsuite
