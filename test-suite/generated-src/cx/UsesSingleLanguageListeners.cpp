// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from single_language_interfaces.djinni

#include "UsesSingleLanguageListeners.h"  // my header
#include "CxOnlyListenerProxy.h"
#include "JavaOnlyListener.h"
#include "ObjcOnlyListener.h"
#include "translation.h"

namespace testsuite {

void UsesSingleLanguageListeners::CallForObjC (IObjcOnlyListener^ L)
{
    try {
        _cppRef->callForObjC(transform<std::shared_ptr<::testsuite::ObjcOnlyListener>, ::testsuite::IObjcOnlyListener^>()(L));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
IObjcOnlyListener^ UsesSingleLanguageListeners::ReturnForObjC ()
{
    try {
        auto cppRet = _cppRef->returnForObjC();
        return transform<std::shared_ptr<::testsuite::ObjcOnlyListener>, ::testsuite::IObjcOnlyListener^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void UsesSingleLanguageListeners::CallForJava (IJavaOnlyListener^ L)
{
    try {
        _cppRef->callForJava(transform<std::shared_ptr<::testsuite::JavaOnlyListener>, ::testsuite::IJavaOnlyListener^>()(L));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
IJavaOnlyListener^ UsesSingleLanguageListeners::ReturnForJava ()
{
    try {
        auto cppRet = _cppRef->returnForJava();
        return transform<std::shared_ptr<::testsuite::JavaOnlyListener>, ::testsuite::IJavaOnlyListener^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void UsesSingleLanguageListeners::CallForCx (ICxOnlyListener^ L)
{
    try {
        _cppRef->callForCx(transform<std::shared_ptr<::testsuite::CxOnlyListener>, ::testsuite::ICxOnlyListener^>()(L));
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
ICxOnlyListener^ UsesSingleLanguageListeners::ReturnForCx ()
{
    try {
        auto cppRet = _cppRef->returnForCx();
        return transform<std::shared_ptr<::testsuite::CxOnlyListener>, ::testsuite::ICxOnlyListener^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}

}  // namespace testsuite
