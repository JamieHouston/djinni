// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from multiple_inheritance.djinni

#include "ListenerCaller.h"  // my header
#include "FirstListener.h"
#include "SecondListener.h"
#include "translation.h"

namespace testsuite {

ListenerCaller^ ListenerCaller::Init (FirstListener^ FirstL, SecondListener^ SecondL)
{
    try {
        auto cppRet = ::testsuite::ListenerCaller::init(transform<std::shared_ptr<::testsuite::FirstListener>, ::testsuite::FirstListener^>()(FirstL), transform<std::shared_ptr<::testsuite::SecondListener>, ::testsuite::SecondListener^>()(SecondL));
        return transform<std::shared_ptr<::testsuite::ListenerCaller>, ::testsuite::ListenerCaller^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void ListenerCaller::CallFirst ()
{
    try {
        _cppRef->callFirst();
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
void ListenerCaller::CallSecond ()
{
    try {
        _cppRef->callSecond();
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}

}  // namespace testsuite
